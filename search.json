[{"path":"https://codoom1.github.io/binaryClass/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christopher Odoom. Maintainer.","code":""},{"path":"https://codoom1.github.io/binaryClass/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Odoom C, Folitse D, Gallagher O, Shannon P (2025). binaryClass: Binary Classification Package. R package version 1.0.0, https://codoom1.github.io/binaryClass/, https://github.com/codoom1/binaryClass.","code":"@Manual{,   title = {binaryClass: Binary Classification Package},   author = {Christopher Odoom and Denis Folitse and Owen Gallagher and Paul Shannon},   year = {2025},   note = {R package version 1.0.0, https://codoom1.github.io/binaryClass/},   url = {https://github.com/codoom1/binaryClass}, }"},{"path":[]},{"path":"https://codoom1.github.io/binaryClass/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Binary Classification Package","text":"binaryClass package provides comprehensive toolkit binary classification tasks R. implements powerful functions model training, evaluation, prediction, focus comparing different classification approaches.","code":""},{"path":[]},{"path":"https://codoom1.github.io/binaryClass/index.html","id":"from-github-release","dir":"","previous_headings":"Installation","what":"From GitHub Release","title":"Binary Classification Package","text":"","code":"# Install the released version from GitHub install.packages(\"https://codoom1.github.io/binaryClass/binaryClass_1.0.0.tar.gz\", repos = NULL)"},{"path":"https://codoom1.github.io/binaryClass/index.html","id":"from-github-with-devtools","dir":"","previous_headings":"Installation","what":"From GitHub with devtools","title":"Binary Classification Package","text":"","code":"# Install development version remotes::install_github(\"codoom1/binaryClass\")"},{"path":"https://codoom1.github.io/binaryClass/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"Binary Classification Package","text":"Full Logistic Regression Backward Stepwise Selection Forward Stepwise Selection GAM (Generalized Additive Model) Lasso Regression Ridge Regression Automatic plotting OptimalModelSearch(..., criterion=\"AUC\", plot_roc=TRUE) Comparison plotting plot_model_rocs() Automatic plotting OptimalModelSearch(..., criterion=\"Accuracy\", plot_cm=TRUE) Manual plotting plot_model_cm() compare_model_rocs: Standalone function compare ROC curves stepwise, lasso, ridge models plot_descrip: Create descriptive visualizations binary classification datasets","code":""},{"path":[]},{"path":"https://codoom1.github.io/binaryClass/index.html","id":"model-selection","dir":"","previous_headings":"Usage Examples","what":"Model Selection","title":"Binary Classification Package","text":"","code":"# Load example data library(binaryClass) library(mlbench) data(PimaIndiansDiabetes) df <- PimaIndiansDiabetes df$diabetes <- ifelse(df$diabetes==\"neg\", 0, 1)  # Find best model using AUC criterion with ROC curve result_auc <- OptimalModelSearch(formula=diabetes~., data=df,                                  criterion=\"AUC\", plot_roc=TRUE,                                 suppress_warnings=TRUE)  # Find best model using Accuracy criterion with confusion matrix result_acc <- OptimalModelSearch(formula=diabetes~., data=df,                                  criterion=\"Accuracy\", plot_cm=TRUE)  # Find best model using AIC criterion result_aic <- OptimalModelSearch(formula=diabetes~., data=df,                                  criterion=\"AIC\")"},{"path":"https://codoom1.github.io/binaryClass/index.html","id":"extract-and-use-the-best-model","dir":"","previous_headings":"Usage Examples","what":"Extract and Use the Best Model","title":"Binary Classification Package","text":"","code":"# Get the best model from results best_model <- extract_best_model(result_auc)  # Use it for predictions on new data new_pred <- predict(best_model, newdata=new_data)"},{"path":"https://codoom1.github.io/binaryClass/index.html","id":"visualizations","dir":"","previous_headings":"Usage Examples","what":"Visualizations","title":"Binary Classification Package","text":"","code":"# ROC curves for AUC criterion plot_model_rocs(result_auc, comparison=TRUE)  # Confusion matrix for Accuracy criterion plot_model_cm(result_acc)  # Standalone ROC curve comparison compare_model_rocs(formula=diabetes~., data=df)"},{"path":"https://codoom1.github.io/binaryClass/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Binary Classification Package","text":"stats MASS gam glmnet pROC caret e1071 graphics grDevices","code":""},{"path":"https://codoom1.github.io/binaryClass/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Binary Classification Package","text":"package licensed MIT License.","code":""},{"path":"https://codoom1.github.io/binaryClass/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Binary Classification Package","text":"Contributions improve binaryClass welcome. Please feel free submit pull request open issue GitHub.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/OptimalModelSearch.html","id":null,"dir":"Reference","previous_headings":"","what":"A Binary Classification Model Selection  — OptimalModelSearch","title":"A Binary Classification Model Selection  — OptimalModelSearch","text":"function binary classification model selection. compares multiple models (full logistic regression, backward stepwise, forward stepwise, GAM, lasso, ridge) based user specified criterions including AUC, Accuracy AIC. function provides simplified method fitting binary classification models simultaneously. returns best model based predetermined set control parameters. parameters include evaluation criteria, formula, data, training percentage threshold accuracy calculations.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/OptimalModelSearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Binary Classification Model Selection  — OptimalModelSearch","text":"","code":"OptimalModelSearch(formula, data, criterion = c(\"AUC\", \"Accuracy\", \"AIC\"),                    training_percent = 0.8, threshold = 0.5,                     suppress_warnings = FALSE, plot_roc = FALSE,                     plot_comparison = FALSE, multi_panel = FALSE,                     plot_cm = FALSE)"},{"path":"https://codoom1.github.io/binaryClass/reference/OptimalModelSearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Binary Classification Model Selection  — OptimalModelSearch","text":"formula formula object defines model structure formula object   lm, glm, gams model building functions. data data.frame matrix object variables formula object can found. response variable must code 1 0 two classes. criterion criteria specifying metric model selection based . function supports AIC, Accuracy, AUC training_percent numeric value 0 1 indicating proportion data use training. Default 0.8. threshold number 0 1 specifies threshold classify observations positive negative. applicable method Accuracy. Threshold tells function distinguish two classes. default 0.5 suppress_warnings Logical indicating whether suppress warning messages (convergence warnings). Default FALSE. Set TRUE hide excessive warnings using datasets near-perfect separation. plot_roc Logical indicating whether automatically plot ROC curves criterion \"AUC\". Default FALSE. TRUE, display ROC curve best model. plot_comparison Logical indicating whether plot comparison models' ROC curves plot_roc TRUE. Default FALSE. TRUE, display ROC curves models single plot. multi_panel Logical indicating whether display model panel plot_comparison TRUE. Default FALSE. TRUE, display model's ROC curve separate panel arranged grid layout. plot_cm Logical indicating whether automatically plot confusion matrix criterion \"Accuracy\". Default FALSE. TRUE, display visual representation confusion matrix best model.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/OptimalModelSearch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A Binary Classification Model Selection  — OptimalModelSearch","text":"\"formula\" input specifies predictors included model. functions similarly formula objects used glm, lm, modeling functions. design choice intended allow users easily fit specified models. \"Data\" input refers dataset used modeling, can either matrix dataframe. crucial ensure variables specified formula present data. \"Criterion\" input allows users search model based preferred performance measure. Currently, function supports three criteria including AUC (popular class), Accuracy, AIC. addition, \"training_percent\" input allows users assess models based proportion training data. flexibility enhances model specification process introduces dynamics model building, especially case binary classification. lastly, threshold option applicable criterion Accuracy, tells function distinguish two classes case confusion matrix generated calculate accuracy measures sensitivity specificity. default 0.5 users can use flexibility train model based knowledge problem. function compares following models: Full Logistic Regression: Uses predictors formula Backward Stepwise: Performs backward selection full model Forward Stepwise: Starts intercept-model adds predictors GAM (Generalized Additive Model): Fits smooth terms numeric predictors Lasso Regression: L1 regularization can shrink coefficients zero Ridge Regression: L2 regularization shrinks coefficients function provides automatic visualization based chosen criterion: criterion=\"AUC\": Use plot_roc=TRUE display ROC curve best model,         plot_comparison=TRUE compare models' ROC curves.         Use multi_panel=TRUE clearer visualization separate panels model. criterion=\"Accuracy\": Use plot_cm=TRUE display confusion matrix         best model, showing true/false positives/negatives metrics. criterion=\"AIC\": visualization provided AIC numerical measure.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/OptimalModelSearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Binary Classification Model Selection  — OptimalModelSearch","text":"criterion criterion used model selection. best_model_name Name best performing model. performance_metric value specified criterion best model. details Additional model details: criterion \"AUC\": Contains ROC object pROC package, can plotted using plot(result$details). criterion \"Accuracy\": Contains confusionMatrix object. criterion \"AIC\": Contains AIC values.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/OptimalModelSearch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A Binary Classification Model Selection  — OptimalModelSearch","text":"Christopher Odoom, Denis Folitse, Owen Gallagher & Paul Shannon <codoom@umass.edu>","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/OptimalModelSearch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Binary Classification Model Selection  — OptimalModelSearch","text":"","code":"##==Example 1: Accuracy criterion====## # \\donttest{ data(PimaIndiansDiabetes, package=\"mlbench\") data.t <- PimaIndiansDiabetes data.t$diabetes <- ifelse(data.t$diabetes==\"neg\", 0, 1) result <- OptimalModelSearch(formula=diabetes~., data=data.t,                             criterion=\"Accuracy\", training_percent=0.8,                              threshold=0.54, suppress_warnings=TRUE) result$best_model_name  # View best model #> [1] \"lasso.Accuracy\" # }  ##==Example 2: AUC criterion====## # \\donttest{ data(Sonar, package=\"mlbench\") dat <- Sonar dat$Class <- ifelse(dat$Class==\"R\", 0, 1) result <- OptimalModelSearch(formula=Class~., data=dat,                            criterion=\"AUC\", training_percent=0.8,                            suppress_warnings=TRUE) #> Setting levels: control = 0, case = 1 #> Setting direction: controls < cases #> Setting levels: control = 0, case = 1 #> Setting direction: controls < cases #> Setting levels: control = 0, case = 1 #> Setting direction: controls < cases #> Setting levels: control = 0, case = 1 #> Setting direction: controls < cases #> Setting levels: control = 0, case = 1 #> Setting direction: controls < cases #> Setting levels: control = 0, case = 1 #> Setting direction: controls < cases result$best_model_name  # View best model #> [1] \"ridge\" # }  ##==Example 3: AIC criterion====## # \\donttest{ data(PimaIndiansDiabetes, package=\"mlbench\") data.t <- PimaIndiansDiabetes data.t$diabetes <- ifelse(data.t$diabetes==\"neg\", 0, 1) result <- OptimalModelSearch(formula=diabetes~., data=data.t,                             criterion=\"AIC\", training_percent=0.8,                             suppress_warnings=TRUE) result$best_model_name  # View best model #> [1] \"gam\" # }  ##==Example 4: ROC Visualization with Multi-Panel Plot====## # \\donttest{ data(Sonar, package=\"mlbench\") dat <- Sonar dat$Class <- ifelse(dat$Class==\"R\", 0, 1) # Plot all ROC curves in separate panels - clearer visualization result <- OptimalModelSearch(formula=Class~., data=dat,                           criterion=\"AUC\", training_percent=0.8,                           suppress_warnings=TRUE, plot_roc=TRUE,                            plot_comparison=TRUE, multi_panel=TRUE) #> Setting levels: control = 0, case = 1 #> Setting direction: controls < cases #> Setting levels: control = 0, case = 1 #> Setting direction: controls < cases #> Setting levels: control = 0, case = 1 #> Setting direction: controls < cases #> Setting levels: control = 0, case = 1 #> Setting direction: controls < cases #> Setting levels: control = 0, case = 1 #> Setting direction: controls < cases #> Setting levels: control = 0, case = 1 #> Setting direction: controls < cases  # }"},{"path":"https://codoom1.github.io/binaryClass/reference/binaryClass.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary Classification Model Selection and Evaluation — binaryClass","title":"Binary Classification Model Selection and Evaluation — binaryClass","text":"binaryClass package provides comprehensive toolkit binary classification tasks R. implements powerful functions model training, evaluation, prediction, focus comparing different classification approaches.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/binaryClass.html","id":"key-functions","dir":"Reference","previous_headings":"","what":"Key Functions","title":"Binary Classification Model Selection and Evaluation — binaryClass","text":"OptimalModelSearch: Automatically compares multiple binary         classification models selects best model based AUC,         Accuracy, AIC extract_best_model: Extracts best model         OptimalModelSearch results use compare_model_rocs: Compare ROC curves different models plot_model_rocs: Plot ROC curves model results plot_model_cm: Plot confusion matrix model results plot_descrip: Create descriptive visualizations binary         classification datasets","code":""},{"path":[]},{"path":"https://codoom1.github.io/binaryClass/reference/compare_model_rocs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare ROC Curves for Different Binary Classification Models — compare_model_rocs","title":"Compare ROC Curves for Different Binary Classification Models — compare_model_rocs","text":"function fits multiple binary classification models (stepwise logistic regression, lasso, ridge) dataset plots ROC curves comparison. helps visualize performance differences models.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/compare_model_rocs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare ROC Curves for Different Binary Classification Models — compare_model_rocs","text":"","code":"compare_model_rocs(   formula,   data,   training_percent = 0.8,   plot_title = \"Comparison of ROC Curves\",   save_plot = FALSE,   pdf_filename = \"roc_curves_comparison.pdf\" )"},{"path":"https://codoom1.github.io/binaryClass/reference/compare_model_rocs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare ROC Curves for Different Binary Classification Models — compare_model_rocs","text":"formula object class \\\"formula\\\": symbolic description model fitted (e.g., `response ~ predictor1 + predictor2` `response ~ .`). data data frame containing variables model. training_percent numeric value 0 1 indicating proportion data use training. Default `0.8`. plot_title character string plot title. Default \"Comparison ROC Curves\". save_plot Logical value indicating whether save plot PDF file. Default FALSE. pdf_filename character string specifying name PDF file save_plot TRUE. Default \"roc_curves_comparison.pdf\".","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/compare_model_rocs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare ROC Curves for Different Binary Classification Models — compare_model_rocs","text":"list containing ROC objects model AUC values: `stepwise_roc`: ROC object stepwise logistic regression model. `lasso_roc`: ROC object lasso regression model. `ridge_roc`: ROC object ridge regression model. `auc_values`: named numeric vector AUC values model. `best_model`: name model highest AUC.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/compare_model_rocs.html","id":"models-compared","dir":"Reference","previous_headings":"","what":"Models Compared","title":"Compare ROC Curves for Different Binary Classification Models — compare_model_rocs","text":"function compares following three models: Stepwise Logistic Regression: Full model predictors formula Lasso Regression: L1 regularization can shrink coefficients zero Ridge Regression: L2 regularization shrinks coefficients Note simplified subset models compared OptimalModelSearch, additionally includes backward stepwise, forward stepwise, GAM models.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/compare_model_rocs.html","id":"relationship-with-optimalmodelsearch","dir":"Reference","previous_headings":"","what":"Relationship with OptimalModelSearch","title":"Compare ROC Curves for Different Binary Classification Models — compare_model_rocs","text":"function standalone tool, users can also generate ROC curves using: OptimalModelSearch(formula, data, criterion=\"AUC\", plot_roc=TRUE) plot best model's ROC curve OptimalModelSearch(formula, data, criterion=\"AUC\", plot_roc=TRUE, plot_comparison=TRUE) plot models' ROC curves plot_model_rocs(result) result output OptimalModelSearch AUC criterion approaches differ compare_model_rocs compares stepwise, lasso ridge, OptimalModelSearch compares full GLM, backward stepwise, forward stepwise, GAM, lasso, ridge.","code":""},{"path":[]},{"path":"https://codoom1.github.io/binaryClass/reference/compare_model_rocs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare ROC Curves for Different Binary Classification Models — compare_model_rocs","text":"","code":"if (FALSE) { # \\dontrun{ # Create a sample dataset set.seed(123) test_df <- data.frame(   x1 = rnorm(100),   x2 = rnorm(100),   y = sample(c(0, 1), 100, replace = TRUE) )  # Method 1: Compare ROC curves using compare_model_rocs result <- compare_model_rocs(y ~ ., data = test_df)  # Access the ROC objects result$stepwise_roc result$lasso_roc result$ridge_roc  # See the AUC values result$auc_values  # Check which model performed best result$best_model  # Method 2: Compare ROC curves using OptimalModelSearch (more models) # Automatic ROC curve of the best model oms_result <- OptimalModelSearch(formula=y ~ ., data=test_df,                               criterion=\"AUC\", plot_roc=TRUE)  # Automatic comparison of all models (full GLM, stepwise, GAM, lasso, ridge) oms_result <- OptimalModelSearch(formula=y ~ ., data=test_df,                               criterion=\"AUC\", plot_roc=TRUE,                                plot_comparison=TRUE) } # }"},{"path":"https://codoom1.github.io/binaryClass/reference/dot-draw_confusion_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal helper function to draw a confusion matrix visualization — .draw_confusion_matrix","title":"Internal helper function to draw a confusion matrix visualization — .draw_confusion_matrix","text":"Internal helper function draw confusion matrix visualization","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/dot-draw_confusion_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal helper function to draw a confusion matrix visualization — .draw_confusion_matrix","text":"","code":".draw_confusion_matrix(cm)"},{"path":"https://codoom1.github.io/binaryClass/reference/dot-draw_confusion_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal helper function to draw a confusion matrix visualization — .draw_confusion_matrix","text":"cm confusion matrix object (typically `caret::confusionMatrix`).","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/dot-plot_barplot_ind.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal helper function for plotting barplots — .plot_barplot_ind","title":"Internal helper function for plotting barplots — .plot_barplot_ind","text":"Internal helper function plotting barplots","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/dot-plot_barplot_ind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal helper function for plotting barplots — .plot_barplot_ind","text":"","code":".plot_barplot_ind(x, var_name, col_idx, max_levels = 13)"},{"path":"https://codoom1.github.io/binaryClass/reference/dot-plot_barplot_ind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal helper function for plotting barplots — .plot_barplot_ind","text":"x vector data variable. var_name name variable (plot title/labels). col_idx column index (used default color selection). max_levels maximum number unique levels percentages omitted (default 13).","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/extract_best_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the best model from the results of OptimalModelSearch — extract_best_model","title":"Extract the best model from the results of OptimalModelSearch — extract_best_model","text":"function extracts best model results OptimalModelSearch returns actual fitted model object. function takes results OptimalModelSearch returns actual best model object can used analysis, prediction, examination.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/extract_best_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the best model from the results of OptimalModelSearch — extract_best_model","text":"","code":"extract_best_model(results, data, refit = TRUE)  extract_best_model(results, data, refit = TRUE)"},{"path":"https://codoom1.github.io/binaryClass/reference/extract_best_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the best model from the results of OptimalModelSearch — extract_best_model","text":"results list returned OptimalModelSearch function data original data frame used model fitting refit Logical indicating whether refit model full dataset (TRUE) return model fitted training set (FALSE). Default TRUE.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/extract_best_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the best model from the results of OptimalModelSearch — extract_best_model","text":"best model object results. model object appropriate class: full.glm: glm object backward.stepwise forward.stepwise: glm object gam: gam object mgcv package lasso ridge: cv.glmnet object glmnet package","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/extract_best_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the best model from the results of OptimalModelSearch — extract_best_model","text":"returned model can used prediction predict(), examination coefficients, analysis typically performed respective model class. refit=TRUE (default), function refits model complete dataset improved prediction performance.","code":""},{"path":[]},{"path":"https://codoom1.github.io/binaryClass/reference/extract_best_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the best model from the results of OptimalModelSearch — extract_best_model","text":"","code":"if (FALSE) { # \\dontrun{ # Find the best model library(mlbench) data(Sonar) dat <- Sonar dat$Class <- ifelse(dat$Class==\"R\", 0, 1)  # Run OptimalModelSearch result <- OptimalModelSearch(formula=Class~., data=dat,                            criterion=\"AUC\", suppress_warnings=TRUE)                             # Extract the best model best_model <- extract_best_model(result, dat)  # Use the model for prediction predictions <- predict(best_model, newdata=dat[1:5,], type=\"response\") print(predictions)  # Examine model coefficients (if applicable to the model type) if(inherits(best_model, \"glm\") || inherits(best_model, \"gam\")) {   print(summary(best_model)) } } # }"},{"path":"https://codoom1.github.io/binaryClass/reference/plot_descrip.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Descriptive Plots for Variables in a Data Frame — plot_descrip","title":"Generate Descriptive Plots for Variables in a Data Frame — plot_descrip","text":"function creates various plots visualize individual variables pairwise relationships response variable (assumed first column) explanatory variables data frame.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/plot_descrip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Descriptive Plots for Variables in a Data Frame — plot_descrip","text":"","code":"plot_descrip(data, type, ppv)"},{"path":"https://codoom1.github.io/binaryClass/reference/plot_descrip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Descriptive Plots for Variables in a Data Frame — plot_descrip","text":"data data frame containing variables plotted. response variable first column `type = \"pair\"`. type character string specifying type plot. Must one \"ind\" \"pair\". ppv integer (1 2) specifying number plots per variable `type = \"ind\"`. argument ignored `type = \"pair\"`.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/plot_descrip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Descriptive Plots for Variables in a Data Frame — plot_descrip","text":"Invisible NULL. Plots generated current graphics device.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/plot_descrip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Descriptive Plots for Variables in a Data Frame — plot_descrip","text":"","code":"if (FALSE) { # \\dontrun{ # --- Examples for plot_descrip ---  # Basic usage with iris dataset data(iris)  # Individual plots (one per variable) plot_descrip(iris, type = \"ind\", ppv = 1)  # Individual plots (two per numeric variable, one for categorical) plot_descrip(iris, type = \"ind\", ppv = 2)  # Pairwise plots (assuming Sepal.Length is the response) plot_descrip(iris, type = \"pair\")  # --- Pairwise plots with a factor response --- data(mtcars) # Make copies to modify mtcars_mod <- mtcars # Treat 'cyl' as a factor response mtcars_mod$cyl <- as.factor(mtcars_mod$cyl) # Plot relationships between 'cyl' and other variables plot_descrip(mtcars_mod[, c(\"cyl\", \"mpg\", \"wt\", \"gear\")], type = \"pair\")  # --- Handling character variables --- # Create some character data char_data <- data.frame(   response = rnorm(50),   category = sample(c(\"A\", \"B\", \"C\"), 50, replace = TRUE),   group = sample(c(\"X\", \"Y\"), 50, replace = TRUE) ) # Individual plots (should create barplots for character columns) plot_descrip(char_data, type = \"ind\", ppv = 1)  # Pairwise plots with character predictor plot_descrip(char_data, type = \"pair\")  # --- Edge case: Single column --- plot_descrip(iris[, \"Sepal.Length\", drop = FALSE], type = \"ind\", ppv = 1)  # --- Handling too many categories in 'pair' type --- # Create data with a categorical variable having many levels iris_many_levels <- iris # Convert Sepal.Width to character and create many unique values artificially iris_many_levels$ManyCats <- as.character(round(iris_many_levels$Sepal.Width * 100)) # Check number of levels (should be > 15) print(paste(\"Number of unique values for ManyCats:\", length(unique(iris_many_levels$ManyCats)))) # Plot pairwise with Sepal.Length as response # Should print a message for 'ManyCats' and skip its plot plot_descrip(iris_many_levels[, c(\"Sepal.Length\", \"Petal.Length\", \"ManyCats\")], type = \"pair\") } # }"},{"path":"https://codoom1.github.io/binaryClass/reference/plot_model_cm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Confusion Matrix from OptimalModelSearch Results — plot_model_cm","title":"Plot Confusion Matrix from OptimalModelSearch Results — plot_model_cm","text":"function takes results OptimalModelSearch Accuracy criterion plots confusion matrix. provides visual representation model's classification performance.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/plot_model_cm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Confusion Matrix from OptimalModelSearch Results — plot_model_cm","text":"","code":"plot_model_cm(   results,   save_plot = FALSE,   pdf_filename = \"confusion_matrix.pdf\" )"},{"path":"https://codoom1.github.io/binaryClass/reference/plot_model_cm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Confusion Matrix from OptimalModelSearch Results — plot_model_cm","text":"results list returned OptimalModelSearch criterion=\"Accuracy\" save_plot Logical indicating whether save plot PDF file. Default FALSE. pdf_filename character string specifying name PDF file save_plot TRUE. Default \"confusion_matrix.pdf\".","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/plot_model_cm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Confusion Matrix from OptimalModelSearch Results — plot_model_cm","text":"confusion matrix object best model returned invisibly","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/plot_model_cm.html","id":"when-to-use","dir":"Reference","previous_headings":"","what":"When to Use","title":"Plot Confusion Matrix from OptimalModelSearch Results — plot_model_cm","text":"Use function want visualize confusion matrix OptimalModelSearch result used \"Accuracy\" criterion. confusion matrix shows true positives, false positives, true negatives, false negatives, along performance metrics like sensitivity, specificity, PPV.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/plot_model_cm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Confusion Matrix from OptimalModelSearch Results — plot_model_cm","text":"","code":"if (FALSE) { # \\dontrun{ # Run OptimalModelSearch with Accuracy criterion library(mlbench) data(PimaIndiansDiabetes) df <- PimaIndiansDiabetes df$diabetes <- ifelse(df$diabetes==\"neg\", 0, 1) result <- OptimalModelSearch(formula=diabetes~., data=df, criterion=\"Accuracy\")  # Plot the confusion matrix plot_model_cm(result) } # }"},{"path":"https://codoom1.github.io/binaryClass/reference/plot_model_rocs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ROC Curves from OptimalModelSearch Results — plot_model_rocs","title":"Plot ROC Curves from OptimalModelSearch Results — plot_model_rocs","text":"function takes results OptimalModelSearch AUC criterion plots ROC curves. can plot either best model's ROC curve comparison multiple models.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/plot_model_rocs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ROC Curves from OptimalModelSearch Results — plot_model_rocs","text":"","code":"plot_model_rocs(   results,   comparison = FALSE,   multi_panel = FALSE,   save_plot = FALSE,   pdf_filename = \"roc_curves.pdf\",   plot_title = NULL )"},{"path":"https://codoom1.github.io/binaryClass/reference/plot_model_rocs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ROC Curves from OptimalModelSearch Results — plot_model_rocs","text":"results list returned OptimalModelSearch criterion=\"AUC\" comparison Logical indicating whether plot models comparison. Default FALSE. multi_panel Logical indicating whether display model panel comparison=TRUE. Default FALSE. save_plot Logical indicating whether save plot PDF file. Default FALSE. pdf_filename character string specifying name PDF file save_plot TRUE. Default \"roc_curves.pdf\". plot_title character string plot title. Default auto-generated.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/plot_model_rocs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ROC Curves from OptimalModelSearch Results — plot_model_rocs","text":"ROC plot displayed ROC object(s) used returned invisibly.","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/plot_model_rocs.html","id":"models-compared","dir":"Reference","previous_headings":"","what":"Models Compared","title":"Plot ROC Curves from OptimalModelSearch Results — plot_model_rocs","text":"function can display ROC curves following models compared OptimalModelSearch: Full Logistic Regression: Uses predictors formula Backward Stepwise: Performs backward selection full model Forward Stepwise: Starts intercept-model adds predictors GAM (Generalized Additive Model): Fits smooth terms numeric predictors Lasso Regression: L1 regularization can shrink coefficients zero Ridge Regression: L2 regularization shrinks coefficients","code":""},{"path":"https://codoom1.github.io/binaryClass/reference/plot_model_rocs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ROC Curves from OptimalModelSearch Results — plot_model_rocs","text":"","code":"if (FALSE) { # \\dontrun{ # Run OptimalModelSearch with AUC criterion library(mlbench) data(Sonar) dat <- Sonar dat$Class <- ifelse(dat$Class==\"R\", 0, 1) result <- OptimalModelSearch(formula=Class~., data=dat, criterion=\"AUC\")  # Plot the best model's ROC curve plot_model_rocs(result)  # Plot comparison of all models' ROC curves on one panel plot_model_rocs(result, comparison=TRUE)  # Plot each model's ROC curve in its own panel plot_model_rocs(result, comparison=TRUE, multi_panel=TRUE) } # }"}]
